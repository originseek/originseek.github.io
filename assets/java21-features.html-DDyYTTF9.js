import{_ as i}from"./plugin-vue_export-helper-BCo6x5W8.js";import{c as s,b as a,o as e}from"./app-DbN7Cy8S.js";const n=i({},[["render",function(i,n){return e(),s("div",null,n[0]||(n[0]=[a('<h1 id="java-21-lts-版本重磅特性解析" tabindex="-1"><a class="header-anchor" href="#java-21-lts-版本重磅特性解析"><span>Java 21 LTS 版本重磅特性解析</span></a></h1><p>Java 21 作为 2023 年 9 月发布的最新长期支持（LTS）版本，为开发者带来了诸多激动人心的新特性。让我们一起来了解其中的重点更新。</p><h2 id="虚拟线程-virtual-threads" tabindex="-1"><a class="header-anchor" href="#虚拟线程-virtual-threads"><span>虚拟线程（Virtual Threads）</span></a></h2><p>虚拟线程是 Java 21 中最受关注的特性之一，它为构建高吞吐量的并发应用程序提供了更好的支持：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">startVirtualThread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;在虚拟线程中运行&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串模板-string-templates" tabindex="-1"><a class="header-anchor" href="#字符串模板-string-templates"><span>字符串模板（String Templates）</span></a></h2><p>字符串模板提供了一种更优雅的字符串插值方式：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> message </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> STR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">name}!&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="记录模式-record-patterns" tabindex="-1"><a class="header-anchor" href="#记录模式-record-patterns"><span>记录模式（Record Patterns）</span></a></h2><p>记录模式让模式匹配更加强大：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">record</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Point</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> y) </span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> printPoint</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> obj) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (obj </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">instanceof</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Point</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> y)) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;x: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;, y: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他重要更新" tabindex="-1"><a class="header-anchor" href="#其他重要更新"><span>其他重要更新</span></a></h2><ul><li>序列集合（Sequenced Collections）</li><li>开关模式匹配（Pattern Matching for switch）</li><li>外部函数和内存 API（Foreign Function &amp; Memory API）</li></ul><p>这些新特性将帮助开发者编写更简洁、更高效的代码，提升开发体验和应用性能。</p>',14)]))}]]),t=JSON.parse('{"path":"/blog/2024/java21-features.html","title":"Java 21 LTS 版本重磅特性解析","lang":"en-US","frontmatter":{"title":"Java 21 LTS 版本重磅特性解析","date":"2024-03-12T00:00:00.000Z","description":"Java 21 作为最新的长期支持版本，带来了多项重要更新和改进","head":[["meta",{"name":"keywords","content":"Java 21, 虚拟线程, 记录模式, 字符串模板"}],["meta",{"property":"og:url","content":"https://originseek.com/blog/2024/java21-features.html"}],["meta",{"property":"og:title","content":"Java 21 LTS 版本重磅特性解析"}],["meta",{"property":"og:description","content":"Java 21 作为最新的长期支持版本，带来了多项重要更新和改进"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-03-29T07:31:35.000Z"}],["meta",{"property":"article:published_time","content":"2024-03-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-29T07:31:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 21 LTS 版本重磅特性解析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-03-29T07:31:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"OriginSeek@王虎\\",\\"url\\":\\"https://originseek.com\\"}]}"]]},"git":{"createdTime":1743147732000,"updatedTime":1743233495000,"contributors":[{"name":"originseek","username":"originseek","email":"luobotiantang@gmail.com","commits":3,"url":"https://github.com/originseek"}]},"readingTime":{"minutes":1.1,"words":329},"filePathRelative":"blog/2024/java21-features.md","localizedDate":"March 12, 2024"}');export{n as comp,t as data};
